/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import { Contract, ContractTransaction } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface EntropyEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "ProviderFeeManagerUpdated(address,address,address)": EventFragment;
    "ProviderFeeUpdated(address,uint128,uint128)": EventFragment;
    "ProviderUriUpdated(address,bytes,bytes)": EventFragment;
    "Registered(tuple)": EventFragment;
    "Requested(tuple)": EventFragment;
    "RequestedWithCallback(address,address,uint64,bytes32,tuple)": EventFragment;
    "Revealed(tuple,bytes32,bytes32,bytes32,bytes32)": EventFragment;
    "RevealedWithCallback(tuple,bytes32,bytes32,bytes32)": EventFragment;
    "Withdrawal(address,address,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProviderFeeManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderUriUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Requested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedWithCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealedWithCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class EntropyEvents extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: EntropyEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    ProviderFeeManagerUpdated(
      provider: null,
      oldFeeManager: null,
      newFeeManager: null
    ): EventFilter;

    ProviderFeeUpdated(provider: null, oldFee: null, newFee: null): EventFilter;

    ProviderUriUpdated(provider: null, oldUri: null, newUri: null): EventFilter;

    Registered(provider: null): EventFilter;

    Requested(request: null): EventFilter;

    RequestedWithCallback(
      provider: string | null,
      requestor: string | null,
      sequenceNumber: BigNumberish | null,
      userRandomNumber: null,
      request: null
    ): EventFilter;

    Revealed(
      request: null,
      userRevelation: null,
      providerRevelation: null,
      blockHash: null,
      randomNumber: null
    ): EventFilter;

    RevealedWithCallback(
      request: null,
      userRandomNumber: null,
      providerRevelation: null,
      randomNumber: null
    ): EventFilter;

    Withdrawal(
      provider: null,
      recipient: null,
      withdrawnAmount: null
    ): EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
