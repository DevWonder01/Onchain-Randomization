/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PythCoinFlipInterface extends ethers.utils.Interface {
  functions: {
    "_entropyCallback(uint64,address,bytes32)": FunctionFragment;
    "bets(uint256)": FunctionFragment;
    "coinTossBets(uint256)": FunctionFragment;
    "entropyProvider()": FunctionFragment;
    "flipWithPyth(bool,bytes32)": FunctionFragment;
    "getBetData(uint256)": FunctionFragment;
    "getBetStatus(uint256)": FunctionFragment;
    "getFlipFee()": FunctionFragment;
    "getProvider()": FunctionFragment;
    "getUserBet(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_entropyCallback",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "bets", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "coinTossBets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entropyProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flipWithPyth",
    values: [boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBetStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFlipFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBet",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_entropyCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "coinTossBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entropyProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flipWithPyth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBetData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBetStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlipFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getUserBet", data: BytesLike): Result;

  events: {
    "FlipRequest(uint64)": EventFragment;
    "FlipResult(uint64,bool)": EventFragment;
    "PlaceBet(uint256,address,bool)": EventFragment;
    "Roll(uint256,address,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlipRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlipResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlaceBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Roll"): EventFragment;
}

export class PythCoinFlip extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PythCoinFlipInterface;

  functions: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    coinTossBets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { face: boolean; rolled: boolean }>;

    "coinTossBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { face: boolean; rolled: boolean }>;

    entropyProvider(overrides?: CallOverrides): Promise<[string]>;

    "entropyProvider()"(overrides?: CallOverrides): Promise<[string]>;

    flipWithPyth(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "flipWithPyth(bool,bytes32)"(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getBetData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        }
      ] & {
        betData: [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
      }
    >;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        }
      ] & {
        betData: [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
      }
    >;

    getBetStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    getFlipFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "getFlipFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    getProvider(overrides?: CallOverrides): Promise<[string]>;

    "getProvider()"(overrides?: CallOverrides): Promise<[string]>;

    getUserBet(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [boolean, string, BigNumber, BigNumber, boolean] & {
            resolved: boolean;
            user: string;
            id: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          },
          [boolean, boolean] & { face: boolean; rolled: boolean }
        ] & {
          bet: [boolean, string, BigNumber, BigNumber, boolean] & {
            resolved: boolean;
            user: string;
            id: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          };
          coinTossBet: [boolean, boolean] & { face: boolean; rolled: boolean };
        })[]
      ]
    >;

    "getUserBet(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          [boolean, string, BigNumber, BigNumber, boolean] & {
            resolved: boolean;
            user: string;
            id: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          },
          [boolean, boolean] & { face: boolean; rolled: boolean }
        ] & {
          bet: [boolean, string, BigNumber, BigNumber, boolean] & {
            resolved: boolean;
            user: string;
            id: BigNumber;
            blockTime: BigNumber;
            betStatus: boolean;
          };
          coinTossBet: [boolean, boolean] & { face: boolean; rolled: boolean };
        })[]
      ]
    >;
  };

  _entropyCallback(
    sequence: BigNumberish,
    provider: string,
    randomNumber: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_entropyCallback(uint64,address,bytes32)"(
    sequence: BigNumberish,
    provider: string,
    randomNumber: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      id: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  "bets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      id: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  coinTossBets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { face: boolean; rolled: boolean }>;

  "coinTossBets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { face: boolean; rolled: boolean }>;

  entropyProvider(overrides?: CallOverrides): Promise<string>;

  "entropyProvider()"(overrides?: CallOverrides): Promise<string>;

  flipWithPyth(
    face: boolean,
    userRandomNumber: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "flipWithPyth(bool,bytes32)"(
    face: boolean,
    userRandomNumber: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getBetData(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      id: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  "getBetData(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, boolean] & {
      resolved: boolean;
      user: string;
      id: BigNumber;
      blockTime: BigNumber;
      betStatus: boolean;
    }
  >;

  getBetStatus(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  "getBetStatus(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getFlipFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getFlipFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProvider(overrides?: CallOverrides): Promise<string>;

  "getProvider()"(overrides?: CallOverrides): Promise<string>;

  getUserBet(
    user: string,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      },
      [boolean, boolean] & { face: boolean; rolled: boolean }
    ] & {
      bet: [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      };
      coinTossBet: [boolean, boolean] & { face: boolean; rolled: boolean };
    })[]
  >;

  "getUserBet(address,uint256)"(
    user: string,
    dataLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      },
      [boolean, boolean] & { face: boolean; rolled: boolean }
    ] & {
      bet: [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      };
      coinTossBet: [boolean, boolean] & { face: boolean; rolled: boolean };
    })[]
  >;

  callStatic: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    coinTossBets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { face: boolean; rolled: boolean }>;

    "coinTossBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { face: boolean; rolled: boolean }>;

    entropyProvider(overrides?: CallOverrides): Promise<string>;

    "entropyProvider()"(overrides?: CallOverrides): Promise<string>;

    flipWithPyth(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "flipWithPyth(bool,bytes32)"(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getBetData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, boolean] & {
        resolved: boolean;
        user: string;
        id: BigNumber;
        blockTime: BigNumber;
        betStatus: boolean;
      }
    >;

    getBetStatus(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getFlipFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFlipFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProvider(overrides?: CallOverrides): Promise<string>;

    "getProvider()"(overrides?: CallOverrides): Promise<string>;

    getUserBet(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        },
        [boolean, boolean] & { face: boolean; rolled: boolean }
      ] & {
        bet: [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
        coinTossBet: [boolean, boolean] & { face: boolean; rolled: boolean };
      })[]
    >;

    "getUserBet(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        },
        [boolean, boolean] & { face: boolean; rolled: boolean }
      ] & {
        bet: [boolean, string, BigNumber, BigNumber, boolean] & {
          resolved: boolean;
          user: string;
          id: BigNumber;
          blockTime: BigNumber;
          betStatus: boolean;
        };
        coinTossBet: [boolean, boolean] & { face: boolean; rolled: boolean };
      })[]
    >;
  };

  filters: {
    FlipRequest(sequenceNumber: null): EventFilter;

    FlipResult(sequenceNumber: null, isHeads: null): EventFilter;

    PlaceBet(id: null, user: string | null, face: null): EventFilter;

    Roll(id: null, user: string | null, face: null, rolled: null): EventFilter;
  };

  estimateGas: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coinTossBets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "coinTossBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entropyProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "entropyProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    flipWithPyth(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "flipWithPyth(bool,bytes32)"(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getBetData(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBetStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFlipFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFlipFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "getProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUserBet(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserBet(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coinTossBets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "coinTossBets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entropyProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "entropyProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flipWithPyth(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "flipWithPyth(bool,bytes32)"(
      face: boolean,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getBetData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBetData(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBetStatus(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBetStatus(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlipFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFlipFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserBet(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserBet(address,uint256)"(
      user: string,
      dataLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
