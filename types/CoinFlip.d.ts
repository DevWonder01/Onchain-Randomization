/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface CoinFlipInterface extends ethers.utils.Interface {
  functions: {
    "_entropyCallback(uint64,address,bytes32)": FunctionFragment;
    "entropyProvider()": FunctionFragment;
    "getFlipFee()": FunctionFragment;
    "getProvider()": FunctionFragment;
    "requestFlip(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_entropyCallback",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "entropyProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlipFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFlip",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "_entropyCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "entropyProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFlipFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFlip",
    data: BytesLike
  ): Result;

  events: {
    "FlipRequest(uint64)": EventFragment;
    "FlipResult(uint64,bool)": EventFragment;
    "readss(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FlipRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlipResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "readss"): EventFragment;
}

export class CoinFlip extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: CoinFlipInterface;

  functions: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    entropyProvider(overrides?: CallOverrides): Promise<[string]>;

    "entropyProvider()"(overrides?: CallOverrides): Promise<[string]>;

    getFlipFee(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    "getFlipFee()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    getProvider(overrides?: CallOverrides): Promise<[string]>;

    "getProvider()"(overrides?: CallOverrides): Promise<[string]>;

    requestFlip(
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestFlip(bytes32)"(
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  _entropyCallback(
    sequence: BigNumberish,
    provider: string,
    randomNumber: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "_entropyCallback(uint64,address,bytes32)"(
    sequence: BigNumberish,
    provider: string,
    randomNumber: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  entropyProvider(overrides?: CallOverrides): Promise<string>;

  "entropyProvider()"(overrides?: CallOverrides): Promise<string>;

  getFlipFee(overrides?: CallOverrides): Promise<BigNumber>;

  "getFlipFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getProvider(overrides?: CallOverrides): Promise<string>;

  "getProvider()"(overrides?: CallOverrides): Promise<string>;

  requestFlip(
    userRandomNumber: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestFlip(bytes32)"(
    userRandomNumber: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    entropyProvider(overrides?: CallOverrides): Promise<string>;

    "entropyProvider()"(overrides?: CallOverrides): Promise<string>;

    getFlipFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFlipFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProvider(overrides?: CallOverrides): Promise<string>;

    "getProvider()"(overrides?: CallOverrides): Promise<string>;

    requestFlip(
      userRandomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestFlip(bytes32)"(
      userRandomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FlipRequest(sequenceNumber: null): EventFilter;

    FlipResult(sequenceNumber: null, isHeads: null): EventFilter;

    readss(r: null): EventFilter;
  };

  estimateGas: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    entropyProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "entropyProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFlipFee(overrides?: CallOverrides): Promise<BigNumber>;

    "getFlipFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "getProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestFlip(
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestFlip(bytes32)"(
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _entropyCallback(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "_entropyCallback(uint64,address,bytes32)"(
      sequence: BigNumberish,
      provider: string,
      randomNumber: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    entropyProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "entropyProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFlipFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFlipFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestFlip(
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestFlip(bytes32)"(
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
