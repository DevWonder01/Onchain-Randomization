/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IEntropyInterface extends ethers.utils.Interface {
  functions: {
    "combineRandomValues(bytes32,bytes32,bytes32)": FunctionFragment;
    "constructUserCommitment(bytes32)": FunctionFragment;
    "getAccruedPythFees()": FunctionFragment;
    "getDefaultProvider()": FunctionFragment;
    "getFee(address)": FunctionFragment;
    "getProviderInfo(address)": FunctionFragment;
    "getRequest(address,uint64)": FunctionFragment;
    "register(uint128,bytes32,bytes,uint64,bytes)": FunctionFragment;
    "request(address,bytes32,bool)": FunctionFragment;
    "requestWithCallback(address,bytes32)": FunctionFragment;
    "reveal(address,uint64,bytes32,bytes32)": FunctionFragment;
    "revealWithCallback(address,uint64,bytes32,bytes32)": FunctionFragment;
    "setFeeManager(address)": FunctionFragment;
    "setProviderFee(uint128)": FunctionFragment;
    "setProviderFeeAsFeeManager(address,uint128)": FunctionFragment;
    "setProviderUri(bytes)": FunctionFragment;
    "withdraw(uint128)": FunctionFragment;
    "withdrawAsFeeManager(address,uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "combineRandomValues",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "constructUserCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccruedPythFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getFee", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getProviderInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequest",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [BigNumberish, BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "request",
    values: [string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithCallback",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revealWithCallback",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderFeeAsFeeManager",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProviderUri",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsFeeManager",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "combineRandomValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "constructUserCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccruedPythFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProviderInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRequest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "request", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderFeeAsFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProviderUri",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsFeeManager",
    data: BytesLike
  ): Result;

  events: {
    "ProviderFeeManagerUpdated(address,address,address)": EventFragment;
    "ProviderFeeUpdated(address,uint128,uint128)": EventFragment;
    "ProviderUriUpdated(address,bytes,bytes)": EventFragment;
    "Registered(tuple)": EventFragment;
    "Requested(tuple)": EventFragment;
    "RequestedWithCallback(address,address,uint64,bytes32,tuple)": EventFragment;
    "Revealed(tuple,bytes32,bytes32,bytes32,bytes32)": EventFragment;
    "RevealedWithCallback(tuple,bytes32,bytes32,bytes32)": EventFragment;
    "Withdrawal(address,address,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProviderFeeManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProviderUriUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Requested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedWithCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revealed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevealedWithCallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export class IEntropy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IEntropyInterface;

  functions: {
    combineRandomValues(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { combinedRandomness: string }>;

    "combineRandomValues(bytes32,bytes32,bytes32)"(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { combinedRandomness: string }>;

    constructUserCommitment(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { userCommitment: string }>;

    "constructUserCommitment(bytes32)"(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { userCommitment: string }>;

    getAccruedPythFees(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accruedPythFeesInWei: BigNumber }>;

    "getAccruedPythFees()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { accruedPythFeesInWei: BigNumber }>;

    getDefaultProvider(
      overrides?: CallOverrides
    ): Promise<[string] & { provider: string }>;

    "getDefaultProvider()"(
      overrides?: CallOverrides
    ): Promise<[string] & { provider: string }>;

    getFee(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeAmount: BigNumber }>;

    "getFee(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { feeAmount: BigNumber }>;

    getProviderInfo(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string
        ] & {
          feeInWei: BigNumber;
          accruedFeesInWei: BigNumber;
          originalCommitment: string;
          originalCommitmentSequenceNumber: BigNumber;
          commitmentMetadata: string;
          uri: string;
          endSequenceNumber: BigNumber;
          sequenceNumber: BigNumber;
          currentCommitment: string;
          currentCommitmentSequenceNumber: BigNumber;
          feeManager: string;
        }
      ] & {
        info: [
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string
        ] & {
          feeInWei: BigNumber;
          accruedFeesInWei: BigNumber;
          originalCommitment: string;
          originalCommitmentSequenceNumber: BigNumber;
          commitmentMetadata: string;
          uri: string;
          endSequenceNumber: BigNumber;
          sequenceNumber: BigNumber;
          currentCommitment: string;
          currentCommitmentSequenceNumber: BigNumber;
          feeManager: string;
        };
      }
    >;

    "getProviderInfo(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string
        ] & {
          feeInWei: BigNumber;
          accruedFeesInWei: BigNumber;
          originalCommitment: string;
          originalCommitmentSequenceNumber: BigNumber;
          commitmentMetadata: string;
          uri: string;
          endSequenceNumber: BigNumber;
          sequenceNumber: BigNumber;
          currentCommitment: string;
          currentCommitmentSequenceNumber: BigNumber;
          feeManager: string;
        }
      ] & {
        info: [
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string,
          string,
          BigNumber,
          BigNumber,
          string,
          BigNumber,
          string
        ] & {
          feeInWei: BigNumber;
          accruedFeesInWei: BigNumber;
          originalCommitment: string;
          originalCommitmentSequenceNumber: BigNumber;
          commitmentMetadata: string;
          uri: string;
          endSequenceNumber: BigNumber;
          sequenceNumber: BigNumber;
          currentCommitment: string;
          currentCommitmentSequenceNumber: BigNumber;
          feeManager: string;
        };
      }
    >;

    getRequest(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          number,
          string,
          BigNumber,
          string,
          boolean,
          boolean
        ] & {
          provider: string;
          sequenceNumber: BigNumber;
          numHashes: number;
          commitment: string;
          blockNumber: BigNumber;
          requester: string;
          useBlockhash: boolean;
          isRequestWithCallback: boolean;
        }
      ] & {
        req: [
          string,
          BigNumber,
          number,
          string,
          BigNumber,
          string,
          boolean,
          boolean
        ] & {
          provider: string;
          sequenceNumber: BigNumber;
          numHashes: number;
          commitment: string;
          blockNumber: BigNumber;
          requester: string;
          useBlockhash: boolean;
          isRequestWithCallback: boolean;
        };
      }
    >;

    "getRequest(address,uint64)"(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          BigNumber,
          number,
          string,
          BigNumber,
          string,
          boolean,
          boolean
        ] & {
          provider: string;
          sequenceNumber: BigNumber;
          numHashes: number;
          commitment: string;
          blockNumber: BigNumber;
          requester: string;
          useBlockhash: boolean;
          isRequestWithCallback: boolean;
        }
      ] & {
        req: [
          string,
          BigNumber,
          number,
          string,
          BigNumber,
          string,
          boolean,
          boolean
        ] & {
          provider: string;
          sequenceNumber: BigNumber;
          numHashes: number;
          commitment: string;
          blockNumber: BigNumber;
          requester: string;
          useBlockhash: boolean;
          isRequestWithCallback: boolean;
        };
      }
    >;

    register(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(uint128,bytes32,bytes,uint64,bytes)"(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    request(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "request(address,bytes32,bool)"(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    requestWithCallback(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "requestWithCallback(address,bytes32)"(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    reveal(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "reveal(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revealWithCallback(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revealWithCallback(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFeeManager(
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeManager(address)"(
      manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProviderFee(
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProviderFee(uint128)"(
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProviderFeeAsFeeManager(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProviderFeeAsFeeManager(address,uint128)"(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setProviderUri(
      newUri: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setProviderUri(bytes)"(
      newUri: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint128)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawAsFeeManager(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawAsFeeManager(address,uint128)"(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  combineRandomValues(
    userRandomness: BytesLike,
    providerRandomness: BytesLike,
    blockHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "combineRandomValues(bytes32,bytes32,bytes32)"(
    userRandomness: BytesLike,
    providerRandomness: BytesLike,
    blockHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  constructUserCommitment(
    userRandomness: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "constructUserCommitment(bytes32)"(
    userRandomness: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAccruedPythFees(overrides?: CallOverrides): Promise<BigNumber>;

  "getAccruedPythFees()"(overrides?: CallOverrides): Promise<BigNumber>;

  getDefaultProvider(overrides?: CallOverrides): Promise<string>;

  "getDefaultProvider()"(overrides?: CallOverrides): Promise<string>;

  getFee(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getFee(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProviderInfo(
    provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string
    ] & {
      feeInWei: BigNumber;
      accruedFeesInWei: BigNumber;
      originalCommitment: string;
      originalCommitmentSequenceNumber: BigNumber;
      commitmentMetadata: string;
      uri: string;
      endSequenceNumber: BigNumber;
      sequenceNumber: BigNumber;
      currentCommitment: string;
      currentCommitmentSequenceNumber: BigNumber;
      feeManager: string;
    }
  >;

  "getProviderInfo(address)"(
    provider: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string
    ] & {
      feeInWei: BigNumber;
      accruedFeesInWei: BigNumber;
      originalCommitment: string;
      originalCommitmentSequenceNumber: BigNumber;
      commitmentMetadata: string;
      uri: string;
      endSequenceNumber: BigNumber;
      sequenceNumber: BigNumber;
      currentCommitment: string;
      currentCommitmentSequenceNumber: BigNumber;
      feeManager: string;
    }
  >;

  getRequest(
    provider: string,
    sequenceNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, string, BigNumber, string, boolean, boolean] & {
      provider: string;
      sequenceNumber: BigNumber;
      numHashes: number;
      commitment: string;
      blockNumber: BigNumber;
      requester: string;
      useBlockhash: boolean;
      isRequestWithCallback: boolean;
    }
  >;

  "getRequest(address,uint64)"(
    provider: string,
    sequenceNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number, string, BigNumber, string, boolean, boolean] & {
      provider: string;
      sequenceNumber: BigNumber;
      numHashes: number;
      commitment: string;
      blockNumber: BigNumber;
      requester: string;
      useBlockhash: boolean;
      isRequestWithCallback: boolean;
    }
  >;

  register(
    feeInWei: BigNumberish,
    commitment: BytesLike,
    commitmentMetadata: BytesLike,
    chainLength: BigNumberish,
    uri: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(uint128,bytes32,bytes,uint64,bytes)"(
    feeInWei: BigNumberish,
    commitment: BytesLike,
    commitmentMetadata: BytesLike,
    chainLength: BigNumberish,
    uri: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  request(
    provider: string,
    userCommitment: BytesLike,
    useBlockHash: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "request(address,bytes32,bool)"(
    provider: string,
    userCommitment: BytesLike,
    useBlockHash: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  requestWithCallback(
    provider: string,
    userRandomNumber: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "requestWithCallback(address,bytes32)"(
    provider: string,
    userRandomNumber: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  reveal(
    provider: string,
    sequenceNumber: BigNumberish,
    userRevelation: BytesLike,
    providerRevelation: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "reveal(address,uint64,bytes32,bytes32)"(
    provider: string,
    sequenceNumber: BigNumberish,
    userRevelation: BytesLike,
    providerRevelation: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revealWithCallback(
    provider: string,
    sequenceNumber: BigNumberish,
    userRandomNumber: BytesLike,
    providerRevelation: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revealWithCallback(address,uint64,bytes32,bytes32)"(
    provider: string,
    sequenceNumber: BigNumberish,
    userRandomNumber: BytesLike,
    providerRevelation: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFeeManager(
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeManager(address)"(
    manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProviderFee(
    newFeeInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProviderFee(uint128)"(
    newFeeInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProviderFeeAsFeeManager(
    provider: string,
    newFeeInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProviderFeeAsFeeManager(address,uint128)"(
    provider: string,
    newFeeInWei: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setProviderUri(
    newUri: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setProviderUri(bytes)"(
    newUri: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint128)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawAsFeeManager(
    provider: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawAsFeeManager(address,uint128)"(
    provider: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    combineRandomValues(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "combineRandomValues(bytes32,bytes32,bytes32)"(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    constructUserCommitment(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "constructUserCommitment(bytes32)"(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccruedPythFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccruedPythFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultProvider(overrides?: CallOverrides): Promise<string>;

    "getDefaultProvider()"(overrides?: CallOverrides): Promise<string>;

    getFee(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getFee(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderInfo(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string
      ] & {
        feeInWei: BigNumber;
        accruedFeesInWei: BigNumber;
        originalCommitment: string;
        originalCommitmentSequenceNumber: BigNumber;
        commitmentMetadata: string;
        uri: string;
        endSequenceNumber: BigNumber;
        sequenceNumber: BigNumber;
        currentCommitment: string;
        currentCommitmentSequenceNumber: BigNumber;
        feeManager: string;
      }
    >;

    "getProviderInfo(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string
      ] & {
        feeInWei: BigNumber;
        accruedFeesInWei: BigNumber;
        originalCommitment: string;
        originalCommitmentSequenceNumber: BigNumber;
        commitmentMetadata: string;
        uri: string;
        endSequenceNumber: BigNumber;
        sequenceNumber: BigNumber;
        currentCommitment: string;
        currentCommitmentSequenceNumber: BigNumber;
        feeManager: string;
      }
    >;

    getRequest(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        provider: string;
        sequenceNumber: BigNumber;
        numHashes: number;
        commitment: string;
        blockNumber: BigNumber;
        requester: string;
        useBlockhash: boolean;
        isRequestWithCallback: boolean;
      }
    >;

    "getRequest(address,uint64)"(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        number,
        string,
        BigNumber,
        string,
        boolean,
        boolean
      ] & {
        provider: string;
        sequenceNumber: BigNumber;
        numHashes: number;
        commitment: string;
        blockNumber: BigNumber;
        requester: string;
        useBlockhash: boolean;
        isRequestWithCallback: boolean;
      }
    >;

    register(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(uint128,bytes32,bytes,uint64,bytes)"(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    request(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "request(address,bytes32,bool)"(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestWithCallback(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requestWithCallback(address,bytes32)"(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reveal(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "reveal(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    revealWithCallback(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revealWithCallback(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeManager(manager: string, overrides?: CallOverrides): Promise<void>;

    "setFeeManager(address)"(
      manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProviderFee(
      newFeeInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProviderFee(uint128)"(
      newFeeInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProviderFeeAsFeeManager(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProviderFeeAsFeeManager(address,uint128)"(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProviderUri(newUri: BytesLike, overrides?: CallOverrides): Promise<void>;

    "setProviderUri(bytes)"(
      newUri: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint128)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAsFeeManager(
      provider: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawAsFeeManager(address,uint128)"(
      provider: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ProviderFeeManagerUpdated(
      provider: null,
      oldFeeManager: null,
      newFeeManager: null
    ): EventFilter;

    ProviderFeeUpdated(provider: null, oldFee: null, newFee: null): EventFilter;

    ProviderUriUpdated(provider: null, oldUri: null, newUri: null): EventFilter;

    Registered(provider: null): EventFilter;

    Requested(request: null): EventFilter;

    RequestedWithCallback(
      provider: string | null,
      requestor: string | null,
      sequenceNumber: BigNumberish | null,
      userRandomNumber: null,
      request: null
    ): EventFilter;

    Revealed(
      request: null,
      userRevelation: null,
      providerRevelation: null,
      blockHash: null,
      randomNumber: null
    ): EventFilter;

    RevealedWithCallback(
      request: null,
      userRandomNumber: null,
      providerRevelation: null,
      randomNumber: null
    ): EventFilter;

    Withdrawal(
      provider: null,
      recipient: null,
      withdrawnAmount: null
    ): EventFilter;
  };

  estimateGas: {
    combineRandomValues(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "combineRandomValues(bytes32,bytes32,bytes32)"(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    constructUserCommitment(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "constructUserCommitment(bytes32)"(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccruedPythFees(overrides?: CallOverrides): Promise<BigNumber>;

    "getAccruedPythFees()"(overrides?: CallOverrides): Promise<BigNumber>;

    getDefaultProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "getDefaultProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(provider: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getFee(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProviderInfo(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProviderInfo(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequest(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRequest(address,uint64)"(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(uint128,bytes32,bytes,uint64,bytes)"(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    request(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "request(address,bytes32,bool)"(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    requestWithCallback(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "requestWithCallback(address,bytes32)"(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    reveal(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "reveal(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revealWithCallback(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revealWithCallback(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFeeManager(manager: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeeManager(address)"(
      manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProviderFee(
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProviderFee(uint128)"(
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProviderFeeAsFeeManager(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProviderFeeAsFeeManager(address,uint128)"(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setProviderUri(
      newUri: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setProviderUri(bytes)"(
      newUri: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdraw(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint128)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawAsFeeManager(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawAsFeeManager(address,uint128)"(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    combineRandomValues(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "combineRandomValues(bytes32,bytes32,bytes32)"(
      userRandomness: BytesLike,
      providerRandomness: BytesLike,
      blockHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    constructUserCommitment(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "constructUserCommitment(bytes32)"(
      userRandomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccruedPythFees(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAccruedPythFees()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDefaultProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDefaultProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFee(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFee(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProviderInfo(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProviderInfo(address)"(
      provider: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequest(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRequest(address,uint64)"(
      provider: string,
      sequenceNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(uint128,bytes32,bytes,uint64,bytes)"(
      feeInWei: BigNumberish,
      commitment: BytesLike,
      commitmentMetadata: BytesLike,
      chainLength: BigNumberish,
      uri: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    request(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "request(address,bytes32,bool)"(
      provider: string,
      userCommitment: BytesLike,
      useBlockHash: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    requestWithCallback(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "requestWithCallback(address,bytes32)"(
      provider: string,
      userRandomNumber: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    reveal(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "reveal(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRevelation: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revealWithCallback(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revealWithCallback(address,uint64,bytes32,bytes32)"(
      provider: string,
      sequenceNumber: BigNumberish,
      userRandomNumber: BytesLike,
      providerRevelation: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeManager(address)"(
      manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProviderFee(
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProviderFee(uint128)"(
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProviderFeeAsFeeManager(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProviderFeeAsFeeManager(address,uint128)"(
      provider: string,
      newFeeInWei: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setProviderUri(
      newUri: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setProviderUri(bytes)"(
      newUri: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint128)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawAsFeeManager(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawAsFeeManager(address,uint128)"(
      provider: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
